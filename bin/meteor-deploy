#!/usr/bin/env bash
set -eo pipefail;

_BASEDIR=$(dirname $0)

source $_BASEDIR/../lib/helpers.sh
source $_BASEDIR/../lib/build.sh

setup_node() {
    local DEST=$1 NODE_VERSION=$2

    ARCH=$(python -c 'import platform; print platform.architecture()[0]')
    if [[ ${ARCH} == '64bit' ]]; then
        NODE_ARCH=x64
    else
        NODE_ARCH=x86
    fi

    echo "Node.js: ${NODE_VERSION} (${NODE_ARCH})" | info

    mkdir -p $DEST
    
    NODE_DIST=node-v${NODE_VERSION}-linux-${NODE_ARCH}

    CACHEDIR=$(cache_dir)

    CACHEDED_DIST=$CACHEDIR/$NODE_DIST.tar.gz

    if [ ! -e $CACHEDED_DIST ]; then
        echo "Downloading node distribution" | indent
        mkdir -p $CACHEDIR
        curl -sS http://nodejs.org/dist/v${NODE_VERSION}/${NODE_DIST}.tar.gz -o $CACHEDED_DIST
    fi

    tar -zxf $CACHEDED_DIST -C $DEST --strip 1

    export npm_config_prefix="$DEST"
    export CPATH="$DEST"/include
    export CPPPATH="$CPATH"
    export PATH="$DEST/bin:$PATH"
}

git_clone() {
    local GITREPO=$1 DEST=$2 REV=$3

    unset GIT_DIR GIT_WORK_TREE
    git clone -q $GITREPO $DEST &> /dev/null
    pushd $DEST > /dev/null
      git config advice.detachedHead false
      git checkout $REV &> /dev/null
      git submodule update --init --recursive &> /dev/null
      find -name .git -prune -exec rm -rf {} \; > /dev/null
    popd > /dev/null
}

build_bundle() {
    local WRKDIR=$1 BUNDLE=$2

    pushd $WRKDIR > /dev/null
      if [ -f ./.meteor/platforms ]; then 
          # build for 0.9.4+
          # remove mobile platforms while building
          have_cordova=$(grep 'ios\|android\|firefoxos' ./.meteor/platforms || true)
          if [ "$have_cordova" ]; then
              buildMeteorAppForCordova $BUNDLE
          else
              buildMeteorApp $BUNDLE
          fi
      else
          # build for 0.9.3
          buildMeteorApp $BUNDLE
      fi
    popd > /dev/null
}

compile() {
    local BUNDLE=$1 NODE_DIR=$2
    local NODE_BIN=$NODE_DIR/bin

    echo "Install node-gyp" | info
    $NODE_BIN/npm install -g node-gyp > /dev/null
    
    pushd $BUNDLE/programs/server > /dev/null
      if [ -d ./npm ]; then
          cd npm
          rebuild_binary_npm_modules $NODE_BIN
          cd ../
      fi

      if [ -d ./node_modules ]; then
          cd ./node_modules
          gyp_rebuild_inside_node_modules $NODE_BIN
          cd ../
      fi

      if [ -f package.json ]; then
          # support for 0.9
          $NODE_BIN/npm install | indent
      else
          # support for older versions
          $NODE_BIN/npm install fibers | indent
          $NODE_BIN/npm install bcrypt | indent
      fi
    popd > /dev/null

}

deploy() {
    local REPO=$1 WRK_DIR=$2
   
    APP_PATH=$(apps_dir)/$REPO; OLD_APP_PATH=${APP_PATH}.old

    # remove old app, if it exists
    if [ -d $OLD_APP_PATH ]; then
        rm -rf $OLD_APP_PATH;
    fi

    ## backup current version
    if [[ -d $APP_PATH ]]; then
        echo "Make backup for old app to $OLD_APP_PATH" | indent
        mv $APP_PATH $OLD_APP_PATH
    fi

    # mov work dir to 
    mv $WRK_DIR $APP_PATH

    NGINX_CONF=$APP_PATH/root_nginx.conf
    echo "Example of nginx-passenger config: $NGINX_CONF" | info
    cat <<EOF> $NGINX_CONF
# # Example of config file for use with passanger
# # You can include this file to your nginx config:
#
# server {
#     listen       8080;
#     server_name  localhost;
#
#     # include bundle
#     include "/webapp/$USER/apps/$REPO/root_nginx.conf";
#
#     # Some env vars, depending on your app.
#     passenger_env_var  MONGO_URL mongodb://localhost:27017/YOUDB;
#     passenger_env_var  ROOT_URL http://EXAMPLE.COM;
#
#     # not for prodaction, but for testing
#     passenger_friendly_error_pages on;
#
#     # may be you wish more instance?
#     passenger_min_instances 2;
#
#     # passenger_env_var _PASSENGER_NODE_CONTROL_SERVER 1;
#
# }
 
location / {
    passenger_enabled         on;
    passenger_sticky_sessions on;
    passenger_app_type        node;
    passenger_startup_file    main.js;
    root                      $APP_PATH/bundle/public;
    passenger_nodejs          $APP_PATH/nodejs/bin/node;
}
EOF

    # if [ -e /etc/init.d/nginx ]; then
    #     echo "Reloading nginx" | indent
    #     sudo /etc/init.d/nginx reload > /dev/null
    # else
    #     echo "Looks you have no nginx, skip reloading" | indent
    # fi

    echo "App located $APP_PATH" | info
}

post_deploy() {
    local REPO=$1 WRK_DIR=$2
    local APP_PATH HOOK_DIR

    APP_PATH=$(apps_dir)/$REPO;

    HOOK_DIR=$(hook_dir)/$REPO

        cat<<EOF
APP_PATH $APP_PATH
HOOK_DIR $HOOK_DIR
EOF

    mkdir -p $HOOK_DIR

    echo "Run post install scripts in $HOOK_DIR" | task
    echo "Put your script here if you need post install" | indent

    for file in $HOOK_DIR/*
    do
        if [[ -x $file ]]; then
            echo "Run $file" | indent
            $file $APP_PATH
        fi
    done
}

clean() {
    local REPO=$1 WRK_DIR=$2

    # no need to have code of app
    rm -rf $WRK_DIR/app

}

build_all() {
  local REPO=$1 REV=$2

  APPGIT=$(repo_directory $REPO)

  TMP_WORK_DIR=$(mktemp -d)
    chmod 755 $TMP_WORK_DIR

  APP_BUILDDIR=$TMP_WORK_DIR/app
    mkdir $APP_BUILDDIR
    echo "Cloning to temporary directory" | info
    git_clone $APPGIT $APP_BUILDDIR $REV

  if [ -e $APP_BUILDDIR/.nodeversion ]; then
      NODE_VER=$(cat $APP_BUILDDIR/.nodeversion)
      echo "Used node version from .nodeversion" | info
  else
      NODE_VER='0.10.36'
  fi

    NODE_DIR=$TMP_WORK_DIR/nodejs
    echo "Install Node.js" | task
    setup_node $NODE_DIR $NODE_VER

  BUNDLE_DIR=$TMP_WORK_DIR
  BUNDLE=$BUNDLE_DIR/bundle
  echo "Bundling bundle" | task
    build_bundle $APP_BUILDDIR $BUNDLE_DIR

  echo "Compile bundle" | task
    compile $BUNDLE $NODE_DIR

  # dirs for passanger
  mkdir -p $BUNDLE/public
  mkdir -p $BUNDLE/tmp
  touch $BUNDLE/tmp/restart.txt

  echo $REV > $TMP_WORK_DIR/rev

  echo "Deploy app" | task
    deploy $REPO $TMP_WORK_DIR

  post_deploy $REPO $TMP_WORK_DIR


  clean $REPO $TMP_WORK_DIR

  echo "Done" | info
}

COMMAND=$1

if [ -z $COMMAND ]; then
    COMMAND="help"
fi

case $COMMAND in
    help)
        cat<<EOF
Usage:
    help                                 Show this help
    prereceive-hook <repo>               Run hook, build
EOF
        ;;
    prereceive-hook)
        REPO=$2
        while read oldrev newrev refname
        do
            if [[ $refname = "refs/heads/master" ]] ; then
                echo "Build $REPO" | task
                build_all $REPO $newrev
            else
                echo $'\e[1G\e[K'"-----> WARNING: deploy did not complete, you must push to master."
            fi

        done
        ;;
    *)
	echo "Unknown command \"$COMMAND\""
	;;
        
esac
